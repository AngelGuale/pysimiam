Overview of Pysimiam
====================

Supervisors
-----------
In pysimiam, the supervisor is the lowest level controller that exists. It has a few functions, but it is abstracted so the class can be applied to a more diverse group of simulated robots.

For the Khepera3, there are two sets of supervisor classes and here is why. The first level, called khepera.K3Supervisor, acts as a layer to specify the types of supervisor behavior specific to the Khepera3. For example, it implements the dynamics of the robot but says nothing about how to control its behavior. You will find that the uni2diff function and get_distances function to be an example of the dynamics implementation. The program is arranged this way so that the highest level supervisors will be clean, neat, and unobstructed by dictionary parsing and tedious code.

The second level of supervisor for the Khepera3 is an example of how to write new supervisors for the Khepera3, the k3defaultsupervisor.K3DefaultSupervisor class which inherits from the K3Supervisor. This class is where all the decision making and controller implementation will happen. To behave appropriately, the K3DefaultSupervisor will need your controller declarations and process implementation. 

A supervisor process is the method or instruction set that occurs each time the simulator updates the robot. In your implementation, this is where the robot should change supervisors and set or add any paramaters to the ui_params variable.

Simulation World
----------------
The simulation world is generated through an xml settings file in the ./world folder. If you would like to change the robot supervisors, add or subtract obstacles and boundaries; you will need to modify this file. See the xml section in the Autogenerated code.

Simulator Perspective
---------------------
From a student perspective, the simulator should require no modification. It is a standalone thread that handles system updates from the UI and updates each object in accordance to its supervisor.
