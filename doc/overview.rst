Overview of Pysimiam
====================

Supervisors
-----------
In pysimiam, the supervisor class is an abstact class for controlling virtual robots. It has few specific functions, and it is abstracted so it may be applied to a more diverse group of simulated robots.

For the Khepera3, two supervisor classes are layered to improve readability and implementation. The first level, called khepera.K3Supervisor, acts as a mathematic layer to specify the mechanics of controlling the Khepera3 robot. For example, it implements the dynamics of the robot but does not dictate its behavior. You will find the uni2diff function and get_distances function within the K3Supervisor dynamics implementation. 

Students are expected to write their own second-level supervisor class to extend the base K3Supervisor class.
As an example, the k3defaultsupervisor.K3DefaultSupervisor class which inherits from the K3Supervisor, is where all the decision making and controller implementation is written. To behave appropriately, the K3DefaultSupervisor will need your controller declarations and process implementation. 

A supervisor process is the object method or instruction set that occurs each time the simulator updates the robot with pose information and obstacle interaction. In your implementation, the process method is where the robot should change supervisors and set or add any paramaters to the parameters variable.

Simulation World
----------------
The simulation world is generated through an xml settings file in the ./worlds folder. If you would like to change the robot supervisors, add or subtract obstacles and boundaries; you will need to modify this file. See the xml section in the Autogenerated code.

Simulator Perspective
---------------------
From a student perspective, the simulator should require no modification. It is a standalone thread that handles system updates from the UI and updates each object in accordance to its supervisor.
